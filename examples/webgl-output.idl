typedef unsignedlong GLenum;
typedef boolean GLboolean;
typedef unsignedlong GLbitfield;
typedef byte GLbyte;
typedef short GLshort;
typedef long GLint;
typedef long GLsizei;
typedef long long GLintptr;
typedef long long GLsizeiptr;
typedef octet GLubyte;
typedef unsignedshort GLushort;
typedef unsignedlong GLuint;
typedef float unrestricted GLfloat;
typedef float unrestricted GLclampf;
dictionary WebGLContextAttributes  {
    GLboolean alpha = true;
    GLboolean depth = true;
    GLboolean stencil = false;
    GLboolean antialias = true;
    GLboolean premultipliedAlpha = true;
    GLboolean preserveDrawingBuffer = false;
    GLboolean preferLowPowerToHighPerformance = false;
    GLboolean failIfMajorPerformanceCaveat = false;
};
interface WebGLObject  {

};
interface WebGLBuffer : WebGLObject {

};
interface WebGLFramebuffer : WebGLObject {

};
interface WebGLProgram : WebGLObject {

};
interface WebGLRenderbuffer : WebGLObject {

};
interface WebGLShader : WebGLObject {

};
interface WebGLTexture : WebGLObject {

};
interface WebGLUniformLocation  {

};
interface WebGLActiveInfo  {
    readonly attribute GLint size;
    readonly attribute GLenum type;
    readonly attribute DOMString name;
};
interface WebGLShaderPrecisionFormat  {
    readonly attribute GLint rangeMin;
    readonly attribute GLint rangeMax;
    readonly attribute GLint precision;
};
interface WebGLRenderingContextBase  {
    GLenum DEPTH_BUFFER_BIT = 256;
    GLenum STENCIL_BUFFER_BIT = 1024;
    GLenum COLOR_BUFFER_BIT = 16384;
    GLenum POINTS = 0;
    GLenum LINES = 1;
    GLenum LINE_LOOP = 2;
    GLenum LINE_STRIP = 3;
    GLenum TRIANGLES = 4;
    GLenum TRIANGLE_STRIP = 5;
    GLenum TRIANGLE_FAN = 6;
    GLenum ZERO = 0;
    GLenum ONE = 1;
    GLenum SRC_COLOR = 768;
    GLenum ONE_MINUS_SRC_COLOR = 769;
    GLenum SRC_ALPHA = 770;
    GLenum ONE_MINUS_SRC_ALPHA = 771;
    GLenum DST_ALPHA = 772;
    GLenum ONE_MINUS_DST_ALPHA = 773;
    GLenum DST_COLOR = 774;
    GLenum ONE_MINUS_DST_COLOR = 775;
    GLenum SRC_ALPHA_SATURATE = 776;
    GLenum FUNC_ADD = 32774;
    GLenum BLEND_EQUATION = 32777;
    GLenum BLEND_EQUATION_RGB = 32777;
    GLenum BLEND_EQUATION_ALPHA = 34877;
    GLenum FUNC_SUBTRACT = 32778;
    GLenum FUNC_REVERSE_SUBTRACT = 32779;
    GLenum BLEND_DST_RGB = 32968;
    GLenum BLEND_SRC_RGB = 32969;
    GLenum BLEND_DST_ALPHA = 32970;
    GLenum BLEND_SRC_ALPHA = 32971;
    GLenum CONSTANT_COLOR = 32769;
    GLenum ONE_MINUS_CONSTANT_COLOR = 32770;
    GLenum CONSTANT_ALPHA = 32771;
    GLenum ONE_MINUS_CONSTANT_ALPHA = 32772;
    GLenum BLEND_COLOR = 32773;
    GLenum ARRAY_BUFFER = 34962;
    GLenum ELEMENT_ARRAY_BUFFER = 34963;
    GLenum ARRAY_BUFFER_BINDING = 34964;
    GLenum ELEMENT_ARRAY_BUFFER_BINDING = 34965;
    GLenum STREAM_DRAW = 35040;
    GLenum STATIC_DRAW = 35044;
    GLenum DYNAMIC_DRAW = 35048;
    GLenum BUFFER_SIZE = 34660;
    GLenum BUFFER_USAGE = 34661;
    GLenum CURRENT_VERTEX_ATTRIB = 34342;
    GLenum FRONT = 1028;
    GLenum BACK = 1029;
    GLenum FRONT_AND_BACK = 1032;
    GLenum CULL_FACE = 2884;
    GLenum BLEND = 3042;
    GLenum DITHER = 3024;
    GLenum STENCIL_TEST = 2960;
    GLenum DEPTH_TEST = 2929;
    GLenum SCISSOR_TEST = 3089;
    GLenum POLYGON_OFFSET_FILL = 32823;
    GLenum SAMPLE_ALPHA_TO_COVERAGE = 32926;
    GLenum SAMPLE_COVERAGE = 32928;
    GLenum NO_ERROR = 0;
    GLenum INVALID_ENUM = 1280;
    GLenum INVALID_VALUE = 1281;
    GLenum INVALID_OPERATION = 1282;
    GLenum OUT_OF_MEMORY = 1285;
    GLenum CW = 2304;
    GLenum CCW = 2305;
    GLenum LINE_WIDTH = 2849;
    GLenum ALIASED_POINT_SIZE_RANGE = 33901;
    GLenum ALIASED_LINE_WIDTH_RANGE = 33902;
    GLenum CULL_FACE_MODE = 2885;
    GLenum FRONT_FACE = 2886;
    GLenum DEPTH_RANGE = 2928;
    GLenum DEPTH_WRITEMASK = 2930;
    GLenum DEPTH_CLEAR_VALUE = 2931;
    GLenum DEPTH_FUNC = 2932;
    GLenum STENCIL_CLEAR_VALUE = 2961;
    GLenum STENCIL_FUNC = 2962;
    GLenum STENCIL_FAIL = 2964;
    GLenum STENCIL_PASS_DEPTH_FAIL = 2965;
    GLenum STENCIL_PASS_DEPTH_PASS = 2966;
    GLenum STENCIL_REF = 2967;
    GLenum STENCIL_VALUE_MASK = 2963;
    GLenum STENCIL_WRITEMASK = 2968;
    GLenum STENCIL_BACK_FUNC = 34816;
    GLenum STENCIL_BACK_FAIL = 34817;
    GLenum STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
    GLenum STENCIL_BACK_PASS_DEPTH_PASS = 34819;
    GLenum STENCIL_BACK_REF = 36003;
    GLenum STENCIL_BACK_VALUE_MASK = 36004;
    GLenum STENCIL_BACK_WRITEMASK = 36005;
    GLenum VIEWPORT = 2978;
    GLenum SCISSOR_BOX = 3088;
    GLenum COLOR_CLEAR_VALUE = 3106;
    GLenum COLOR_WRITEMASK = 3107;
    GLenum UNPACK_ALIGNMENT = 3317;
    GLenum PACK_ALIGNMENT = 3333;
    GLenum MAX_TEXTURE_SIZE = 3379;
    GLenum MAX_VIEWPORT_DIMS = 3386;
    GLenum SUBPIXEL_BITS = 3408;
    GLenum RED_BITS = 3410;
    GLenum GREEN_BITS = 3411;
    GLenum BLUE_BITS = 3412;
    GLenum ALPHA_BITS = 3413;
    GLenum DEPTH_BITS = 3414;
    GLenum STENCIL_BITS = 3415;
    GLenum POLYGON_OFFSET_UNITS = 10752;
    GLenum POLYGON_OFFSET_FACTOR = 32824;
    GLenum TEXTURE_BINDING_2D = 32873;
    GLenum SAMPLE_BUFFERS = 32936;
    GLenum SAMPLES = 32937;
    GLenum SAMPLE_COVERAGE_VALUE = 32938;
    GLenum SAMPLE_COVERAGE_INVERT = 32939;
    GLenum COMPRESSED_TEXTURE_FORMATS = 34467;
    GLenum DONT_CARE = 4352;
    GLenum FASTEST = 4353;
    GLenum NICEST = 4354;
    GLenum GENERATE_MIPMAP_HINT = 33170;
    GLenum BYTE = 5120;
    GLenum UNSIGNED_BYTE = 5121;
    GLenum SHORT = 5122;
    GLenum UNSIGNED_SHORT = 5123;
    GLenum INT = 5124;
    GLenum UNSIGNED_INT = 5125;
    GLenum FLOAT = 5126;
    GLenum DEPTH_COMPONENT = 6402;
    GLenum ALPHA = 6406;
    GLenum RGB = 6407;
    GLenum RGBA = 6408;
    GLenum LUMINANCE = 6409;
    GLenum LUMINANCE_ALPHA = 6410;
    GLenum UNSIGNED_SHORT_4_4_4_4 = 32819;
    GLenum UNSIGNED_SHORT_5_5_5_1 = 32820;
    GLenum UNSIGNED_SHORT_5_6_5 = 33635;
    GLenum FRAGMENT_SHADER = 35632;
    GLenum VERTEX_SHADER = 35633;
    GLenum MAX_VERTEX_ATTRIBS = 34921;
    GLenum MAX_VERTEX_UNIFORM_VECTORS = 36347;
    GLenum MAX_VARYING_VECTORS = 36348;
    GLenum MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
    GLenum MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
    GLenum MAX_TEXTURE_IMAGE_UNITS = 34930;
    GLenum MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
    GLenum SHADER_TYPE = 35663;
    GLenum DELETE_STATUS = 35712;
    GLenum LINK_STATUS = 35714;
    GLenum VALIDATE_STATUS = 35715;
    GLenum ATTACHED_SHADERS = 35717;
    GLenum ACTIVE_UNIFORMS = 35718;
    GLenum ACTIVE_ATTRIBUTES = 35721;
    GLenum SHADING_LANGUAGE_VERSION = 35724;
    GLenum CURRENT_PROGRAM = 35725;
    GLenum NEVER = 512;
    GLenum LESS = 513;
    GLenum EQUAL = 514;
    GLenum LEQUAL = 515;
    GLenum GREATER = 516;
    GLenum NOTEQUAL = 517;
    GLenum GEQUAL = 518;
    GLenum ALWAYS = 519;
    GLenum KEEP = 7680;
    GLenum REPLACE = 7681;
    GLenum INCR = 7682;
    GLenum DECR = 7683;
    GLenum INVERT = 5386;
    GLenum INCR_WRAP = 34055;
    GLenum DECR_WRAP = 34056;
    GLenum VENDOR = 7936;
    GLenum RENDERER = 7937;
    GLenum VERSION = 7938;
    GLenum NEAREST = 9728;
    GLenum LINEAR = 9729;
    GLenum NEAREST_MIPMAP_NEAREST = 9984;
    GLenum LINEAR_MIPMAP_NEAREST = 9985;
    GLenum NEAREST_MIPMAP_LINEAR = 9986;
    GLenum LINEAR_MIPMAP_LINEAR = 9987;
    GLenum TEXTURE_MAG_FILTER = 10240;
    GLenum TEXTURE_MIN_FILTER = 10241;
    GLenum TEXTURE_WRAP_S = 10242;
    GLenum TEXTURE_WRAP_T = 10243;
    GLenum TEXTURE_2D = 3553;
    GLenum TEXTURE = 5890;
    GLenum TEXTURE_CUBE_MAP = 34067;
    GLenum TEXTURE_BINDING_CUBE_MAP = 34068;
    GLenum TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
    GLenum TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
    GLenum TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
    GLenum TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
    GLenum TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
    GLenum TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
    GLenum MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
    GLenum TEXTURE0 = 33984;
    GLenum TEXTURE1 = 33985;
    GLenum TEXTURE2 = 33986;
    GLenum TEXTURE3 = 33987;
    GLenum TEXTURE4 = 33988;
    GLenum TEXTURE5 = 33989;
    GLenum TEXTURE6 = 33990;
    GLenum TEXTURE7 = 33991;
    GLenum TEXTURE8 = 33992;
    GLenum TEXTURE9 = 33993;
    GLenum TEXTURE10 = 33994;
    GLenum TEXTURE11 = 33995;
    GLenum TEXTURE12 = 33996;
    GLenum TEXTURE13 = 33997;
    GLenum TEXTURE14 = 33998;
    GLenum TEXTURE15 = 33999;
    GLenum TEXTURE16 = 34000;
    GLenum TEXTURE17 = 34001;
    GLenum TEXTURE18 = 34002;
    GLenum TEXTURE19 = 34003;
    GLenum TEXTURE20 = 34004;
    GLenum TEXTURE21 = 34005;
    GLenum TEXTURE22 = 34006;
    GLenum TEXTURE23 = 34007;
    GLenum TEXTURE24 = 34008;
    GLenum TEXTURE25 = 34009;
    GLenum TEXTURE26 = 34010;
    GLenum TEXTURE27 = 34011;
    GLenum TEXTURE28 = 34012;
    GLenum TEXTURE29 = 34013;
    GLenum TEXTURE30 = 34014;
    GLenum TEXTURE31 = 34015;
    GLenum ACTIVE_TEXTURE = 34016;
    GLenum REPEAT = 10497;
    GLenum CLAMP_TO_EDGE = 33071;
    GLenum MIRRORED_REPEAT = 33648;
    GLenum FLOAT_VEC2 = 35664;
    GLenum FLOAT_VEC3 = 35665;
    GLenum FLOAT_VEC4 = 35666;
    GLenum INT_VEC2 = 35667;
    GLenum INT_VEC3 = 35668;
    GLenum INT_VEC4 = 35669;
    GLenum BOOL = 35670;
    GLenum BOOL_VEC2 = 35671;
    GLenum BOOL_VEC3 = 35672;
    GLenum BOOL_VEC4 = 35673;
    GLenum FLOAT_MAT2 = 35674;
    GLenum FLOAT_MAT3 = 35675;
    GLenum FLOAT_MAT4 = 35676;
    GLenum SAMPLER_2D = 35678;
    GLenum SAMPLER_CUBE = 35680;
    GLenum VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
    GLenum VERTEX_ATTRIB_ARRAY_SIZE = 34339;
    GLenum VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
    GLenum VERTEX_ATTRIB_ARRAY_TYPE = 34341;
    GLenum VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
    GLenum VERTEX_ATTRIB_ARRAY_POINTER = 34373;
    GLenum VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
    GLenum IMPLEMENTATION_COLOR_READ_TYPE = 35738;
    GLenum IMPLEMENTATION_COLOR_READ_FORMAT = 35739;
    GLenum COMPILE_STATUS = 35713;
    GLenum LOW_FLOAT = 36336;
    GLenum MEDIUM_FLOAT = 36337;
    GLenum HIGH_FLOAT = 36338;
    GLenum LOW_INT = 36339;
    GLenum MEDIUM_INT = 36340;
    GLenum HIGH_INT = 36341;
    GLenum FRAMEBUFFER = 36160;
    GLenum RENDERBUFFER = 36161;
    GLenum RGBA4 = 32854;
    GLenum RGB5_A1 = 32855;
    GLenum RGB565 = 36194;
    GLenum DEPTH_COMPONENT16 = 33189;
    GLenum STENCIL_INDEX = 6401;
    GLenum STENCIL_INDEX8 = 36168;
    GLenum DEPTH_STENCIL = 34041;
    GLenum RENDERBUFFER_WIDTH = 36162;
    GLenum RENDERBUFFER_HEIGHT = 36163;
    GLenum RENDERBUFFER_INTERNAL_FORMAT = 36164;
    GLenum RENDERBUFFER_RED_SIZE = 36176;
    GLenum RENDERBUFFER_GREEN_SIZE = 36177;
    GLenum RENDERBUFFER_BLUE_SIZE = 36178;
    GLenum RENDERBUFFER_ALPHA_SIZE = 36179;
    GLenum RENDERBUFFER_DEPTH_SIZE = 36180;
    GLenum RENDERBUFFER_STENCIL_SIZE = 36181;
    GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
    GLenum FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
    GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
    GLenum FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
    GLenum COLOR_ATTACHMENT0 = 36064;
    GLenum DEPTH_ATTACHMENT = 36096;
    GLenum STENCIL_ATTACHMENT = 36128;
    GLenum DEPTH_STENCIL_ATTACHMENT = 33306;
    GLenum NONE = 0;
    GLenum FRAMEBUFFER_COMPLETE = 36053;
    GLenum FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
    GLenum FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
    GLenum FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
    GLenum FRAMEBUFFER_UNSUPPORTED = 36061;
    GLenum FRAMEBUFFER_BINDING = 36006;
    GLenum RENDERBUFFER_BINDING = 36007;
    GLenum MAX_RENDERBUFFER_SIZE = 34024;
    GLenum INVALID_FRAMEBUFFER_OPERATION = 1286;
    GLenum UNPACK_FLIP_Y_WEBGL = 37440;
    GLenum UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
    GLenum CONTEXT_LOST_WEBGL = 37442;
    GLenum UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
    GLenum BROWSER_DEFAULT_WEBGL = 37444;
    readonly attribute HTMLCanvasElement canvas;
    readonly attribute GLsizei drawingBufferWidth;
    readonly attribute GLsizei drawingBufferHeight;
    WebGLContextAttributes? getContextAttributes();
    boolean isContextLost();
    sequence<DOMString>? getSupportedExtensions();
    object? getExtension(DOMString name);
    void activeTexture(GLenum texture);
    void attachShader(WebGLProgram? program, WebGLShader? shader);
    void bindAttribLocation(WebGLProgram? program, GLuint index, DOMString name);
    void bindBuffer(GLenum target, WebGLBuffer? buffer);
    void bindFramebuffer(GLenum target, WebGLFramebuffer? framebuffer);
    void bindRenderbuffer(GLenum target, WebGLRenderbuffer? renderbuffer);
    void bindTexture(GLenum target, WebGLTexture? texture);
    void blendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
    void blendEquation(GLenum mode);
    void blendEquationSeparate(GLenum modeRGB, GLenum modeAlpha);
    void blendFunc(GLenum sfactor, GLenum dfactor);
    void blendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
    void bufferData(GLenum target, GLsizeiptr size, GLenum usage);
    void bufferData(GLenum target, BufferDataSource? data, GLenum usage);
    void bufferSubData(GLenum target, GLintptr offset, BufferDataSource? data);
    GLenum checkFramebufferStatus(GLenum target);
    void clear(GLbitfield mask);
    void clearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha);
    void clearDepth(GLclampf depth);
    void clearStencil(GLint s);
    void colorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
    void compileShader(WebGLShader? shader);
    void compressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, ArrayBufferView data);
    void compressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, ArrayBufferView data);
    void copyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
    void copyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
    WebGLBuffer? createBuffer();
    WebGLFramebuffer? createFramebuffer();
    WebGLProgram? createProgram();
    WebGLRenderbuffer? createRenderbuffer();
    WebGLShader? createShader(GLenum type);
    WebGLTexture? createTexture();
    void cullFace(GLenum mode);
    void deleteBuffer(WebGLBuffer? buffer);
    void deleteFramebuffer(WebGLFramebuffer? framebuffer);
    void deleteProgram(WebGLProgram? program);
    void deleteRenderbuffer(WebGLRenderbuffer? renderbuffer);
    void deleteShader(WebGLShader? shader);
    void deleteTexture(WebGLTexture? texture);
    void depthFunc(GLenum func);
    void depthMask(GLboolean flag);
    void depthRange(GLclampf zNear, GLclampf zFar);
    void detachShader(WebGLProgram? program, WebGLShader? shader);
    void disable(GLenum cap);
    void disableVertexAttribArray(GLuint index);
    void drawArrays(GLenum mode, GLint first, GLsizei count);
    void drawElements(GLenum mode, GLsizei count, GLenum type, GLintptr offset);
    void enable(GLenum cap);
    void enableVertexAttribArray(GLuint index);
    void finish();
    void flush();
    void framebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, WebGLRenderbuffer? renderbuffer);
    void framebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, WebGLTexture? texture, GLint level);
    void frontFace(GLenum mode);
    void generateMipmap(GLenum target);
    WebGLActiveInfo? getActiveAttrib(WebGLProgram? program, GLuint index);
    WebGLActiveInfo? getActiveUniform(WebGLProgram? program, GLuint index);
    sequence<WebGLShader>? getAttachedShaders(WebGLProgram? program);
    GLint getAttribLocation(WebGLProgram? program, DOMString name);
    any getBufferParameter(GLenum target, GLenum pname);
    any getParameter(GLenum pname);
    GLenum getError();
    any getFramebufferAttachmentParameter(GLenum target, GLenum attachment, GLenum pname);
    any getProgramParameter(WebGLProgram? program, GLenum pname);
    DOMString? getProgramInfoLog(WebGLProgram? program);
    any getRenderbufferParameter(GLenum target, GLenum pname);
    any getShaderParameter(WebGLShader? shader, GLenum pname);
    WebGLShaderPrecisionFormat? getShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype);
    DOMString? getShaderInfoLog(WebGLShader? shader);
    DOMString? getShaderSource(WebGLShader? shader);
    any getTexParameter(GLenum target, GLenum pname);
    any getUniform(WebGLProgram? program, WebGLUniformLocation? location);
    WebGLUniformLocation? getUniformLocation(WebGLProgram? program, DOMString name);
    any getVertexAttrib(GLuint index, GLenum pname);
    GLsizeiptr getVertexAttribOffset(GLuint index, GLenum pname);
    void hint(GLenum target, GLenum mode);
    GLboolean isBuffer(WebGLBuffer? buffer);
    GLboolean isEnabled(GLenum cap);
    GLboolean isFramebuffer(WebGLFramebuffer? framebuffer);
    GLboolean isProgram(WebGLProgram? program);
    GLboolean isRenderbuffer(WebGLRenderbuffer? renderbuffer);
    GLboolean isShader(WebGLShader? shader);
    GLboolean isTexture(WebGLTexture? texture);
    void lineWidth(GLfloat width);
    void linkProgram(WebGLProgram? program);
    void pixelStorei(GLenum pname, GLint param);
    void polygonOffset(GLfloat factor, GLfloat units);
    void readPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
    void renderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
    void sampleCoverage(GLclampf value, GLboolean invert);
    void scissor(GLint x, GLint y, GLsizei width, GLsizei height);
    void shaderSource(WebGLShader? shader, DOMString source);
    void stencilFunc(GLenum func, GLint ref, GLuint mask);
    void stencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask);
    void stencilMask(GLuint mask);
    void stencilMaskSeparate(GLenum face, GLuint mask);
    void stencilOp(GLenum fail, GLenum zfail, GLenum zpass);
    void stencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass);
    void texImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, ArrayBufferView? pixels);
    void texImage2D(GLenum target, GLint level, GLenum internalformat, GLenum format, GLenum type, TexImageSource? source);
    void texParameterf(GLenum target, GLenum pname, GLfloat param);
    void texParameteri(GLenum target, GLenum pname, GLint param);
    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, ArrayBufferView? pixels);
    void texSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLenum format, GLenum type, TexImageSource? source);
    void uniform1f(WebGLUniformLocation? location, GLfloat x);
    void uniform1fv(WebGLUniformLocation? location, Float32Array v);
    void uniform1fv(WebGLUniformLocation? location, sequence<GLfloat> v);
    void uniform1i(WebGLUniformLocation? location, GLint x);
    void uniform1iv(WebGLUniformLocation? location, Int32Array v);
    void uniform1iv(WebGLUniformLocation? location, sequence<long> v);
    void uniform2f(WebGLUniformLocation? location, GLfloat x, GLfloat y);
    void uniform2fv(WebGLUniformLocation? location, Float32Array v);
    void uniform2fv(WebGLUniformLocation? location, sequence<GLfloat> v);
    void uniform2i(WebGLUniformLocation? location, GLint x, GLint y);
    void uniform2iv(WebGLUniformLocation? location, Int32Array v);
    void uniform2iv(WebGLUniformLocation? location, sequence<long> v);
    void uniform3f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z);
    void uniform3fv(WebGLUniformLocation? location, Float32Array v);
    void uniform3fv(WebGLUniformLocation? location, sequence<GLfloat> v);
    void uniform3i(WebGLUniformLocation? location, GLint x, GLint y, GLint z);
    void uniform3iv(WebGLUniformLocation? location, Int32Array v);
    void uniform3iv(WebGLUniformLocation? location, sequence<long> v);
    void uniform4f(WebGLUniformLocation? location, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void uniform4fv(WebGLUniformLocation? location, Float32Array v);
    void uniform4fv(WebGLUniformLocation? location, sequence<GLfloat> v);
    void uniform4i(WebGLUniformLocation? location, GLint x, GLint y, GLint z, GLint w);
    void uniform4iv(WebGLUniformLocation? location, Int32Array v);
    void uniform4iv(WebGLUniformLocation? location, sequence<long> v);
    void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, Float32Array value);
    void uniformMatrix2fv(WebGLUniformLocation? location, GLboolean transpose, sequence<GLfloat> value);
    void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, Float32Array value);
    void uniformMatrix3fv(WebGLUniformLocation? location, GLboolean transpose, sequence<GLfloat> value);
    void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, Float32Array value);
    void uniformMatrix4fv(WebGLUniformLocation? location, GLboolean transpose, sequence<GLfloat> value);
    void useProgram(WebGLProgram? program);
    void validateProgram(WebGLProgram? program);
    void vertexAttrib1f(GLuint indx, GLfloat x);
    void vertexAttrib1fv(GLuint indx, Float32Array values);
    void vertexAttrib1fv(GLuint indx, sequence<GLfloat> values);
    void vertexAttrib2f(GLuint indx, GLfloat x, GLfloat y);
    void vertexAttrib2fv(GLuint indx, Float32Array values);
    void vertexAttrib2fv(GLuint indx, sequence<GLfloat> values);
    void vertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z);
    void vertexAttrib3fv(GLuint indx, Float32Array values);
    void vertexAttrib3fv(GLuint indx, sequence<GLfloat> values);
    void vertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
    void vertexAttrib4fv(GLuint indx, Float32Array values);
    void vertexAttrib4fv(GLuint indx, sequence<GLfloat> values);
    void vertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);
    void viewport(GLint x, GLint y, GLsizei width, GLsizei height);
};
interface WebGLRenderingContext  {

};
WebGLRenderingContext implements WebGLRenderingContextBase;
interface WebGLContextEvent : Event {
    readonly attribute DOMString statusMessage;
};
dictionary WebGLContextEventInit : EventInit {
    DOMString statusMessage;
};
